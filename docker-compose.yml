services:
  frontend:
    image: node:20-alpine
    container_name: lms-frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-3002}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5000/api/v1}
    command: sh -c "npm install && npm start"
    depends_on:
      - backend
    networks:
      - lms-network
    restart: unless-stopped

  backend:
    image: node:20-alpine
    container_name: lms-backend
    working_dir: /app
    volumes:
      - ./backend:/app
      - /app/node_modules
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL:-postgresql://lms_user:lms_password@postgres:5432/lms_db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - PORT=5000
    command: sh -c "apk add --no-cache openssl openssl-dev python3 make g++ && npm install && npx prisma generate && npm run dev"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - lms-network
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: lms-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-lms_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-lms_password}
      - POSTGRES_DB=${POSTGRES_DB:-lms_db}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - lms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lms_user} -d ${POSTGRES_DB:-lms_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: lms-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - lms-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx for production environment (commented out for development)
  # nginx:
  #   image: nginx:alpine
  #   container_name: lms-nginx
  #   volumes:
  #     - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - lms-network
  #   restart: unless-stopped

networks:
  lms-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local